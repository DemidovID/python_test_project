import json
import random
import logging
import asyncio
import torch
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from transformers import GPT2LMHeadModel, GPT2Tokenizer
from config import TOKEN  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ–∞–π–ª config.py —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
with open("/Users/igordemidov/Desktop/DemidovIgorBot/English_bot/data.json", "r", encoding="utf-8") as file:
    data = json.load(file)

# –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–æ—Ä–∏–∏
user_theory_progress = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìñ –°–ª–æ–≤–∞"), KeyboardButton(text="üó£ –†–∞–∑–≥–æ–≤–æ—Ä")],
        [KeyboardButton(text="üìö –¢–µ–æ—Ä–∏—è TIHL"), KeyboardButton(text="ü§ñ GPT-2")]
    ],
    resize_keyboard=True
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ GPT-2
MODEL_NAME = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(MODEL_NAME)
model = GPT2LMHeadModel.from_pretrained(MODEL_NAME)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å GPT-2
def generate_gpt2_response(prompt, max_length=50):
    input_ids = tokenizer.encode(prompt, return_tensors="pt")
    
    with torch.no_grad():
        output = model.generate(
            input_ids, 
            max_length=max_length, 
            num_return_sequences=1, 
            pad_token_id=tokenizer.eos_token_id
        )

    return tokenizer.decode(output[0], skip_special_tokens=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å!",
        reply_markup=menu_keyboard
    )

# –°–ª–æ–≤–∞
@dp.message(lambda msg: msg.text == "üìñ –°–ª–æ–≤–∞")
async def send_word(message: Message):
    word = random.choice(data["words"])
    response = f"**–°–ª–æ–≤–æ:** {word['word']}\n**–ü–µ—Ä–µ–≤–æ–¥:** {word['translation']}\n**–ü—Ä–∏–º–µ—Ä:** {word['example']}"
    await message.answer(response, parse_mode="Markdown")

# –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
@dp.message(lambda msg: msg.text == "üó£ –†–∞–∑–≥–æ–≤–æ—Ä")
async def send_question(message: Message):
    question = random.choice(data["questions"])
    await message.answer(f"üí¨ {question}")

# –¢–µ–æ—Ä–∏—è TIHL
@dp.message(lambda msg: msg.text == "üìö –¢–µ–æ—Ä–∏—è TIHL")
async def send_theory(message: Message):
    user_id = message.from_user.id
    if user_id not in user_theory_progress:
        user_theory_progress[user_id] = 0

    index = user_theory_progress[user_id]
    if index < len(data["theory"]):
        await message.answer(data["theory"][index])
        user_theory_progress[user_id] += 1
    else:
        await message.answer("–¢—ã —É–∂–µ –∏–∑—É—á–∏–ª –≤—Å—é —Ç–µ–æ—Ä–∏—é!")

# GPT-2 —á–∞—Ç
@dp.message(lambda msg: msg.text == "ü§ñ GPT-2")
async def ask_gpt2(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ GPT-2!")

@dp.message()
async def handle_gpt2_message(message: Message):
    response = generate_gpt2_response(message.text)
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
