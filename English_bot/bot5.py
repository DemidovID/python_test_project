import asyncio
import language_tool_python
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from config import TOKEN  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ–∞–π–ª config.py —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
bot = Bot(token=TOKEN)
dp = Dispatcher()
tool = language_tool_python.LanguageTool('en-US')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ"
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úçÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ")],
    ],
    resize_keyboard=True
)

# –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç –ø–∏—Å—å–º–æ
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
def check_text(text):
    matches = tool.check(text)
    if not matches:
        return "‚úÖ No issues found! Your text is great."

    suggestions = []
    corrected_text = text

    for match in matches:
        error_part = text[match.offset:match.offset + match.errorLength]
        suggested_fix = ", ".join(match.replacements) if match.replacements else "No suggestion"

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–º–µ–Ω—É)
        if match.replacements:
            corrected_text = corrected_text.replace(error_part, match.replacements[0], 1)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
        suggestions.append(
            f"‚ùå **–û—à–∏–±–∫–∞:** {error_part}\n"
            f"üìå **–û–ø–∏—Å–∞–Ω–∏–µ:** {match.message}\n"
            f"üí° **–°–æ–≤–µ—Ç:** {suggested_fix}\n"
        )

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    response = "**–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:**\n" + "\n".join(suggestions) + "\n"
    response += "**‚úçÔ∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:**\n" + corrected_text
    return response

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.\n\n"
        "–ù–∞–∂–º–∏ '‚úçÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ', –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏ —è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—é.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ"
@dp.message()
async def handle_button_press(message: Message):
    if message.text == "‚úçÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ":
        user_states[message.from_user.id] = "writing"
        await message.answer("üìù –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏ —è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—é.")
    elif user_states.get(message.from_user.id) == "writing":
        result = check_text(message.text)
        await message.answer(result, parse_mode="Markdown")
        user_states[message.from_user.id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("‚ùì –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '‚úçÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
