import json
import random
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from config import TOKEN  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ–∞–π–ª config.py —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
with open("/Users/igordemidov/Desktop/DemidovIgorBot/English_bot/data.json", "r", encoding="utf-8") as file:
    data = json.load(file)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßë‚Äçüè´ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤"), KeyboardButton(text="üìö –û–±—â–∏–µ —Å–ª–æ–≤–∞")],
        [KeyboardButton(text="üîÑ –¢–µ—Å—Ç—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"), KeyboardButton(text="üó£ –§—Ä–∞–∑—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è")]
    ],
    resize_keyboard=True
)

# –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
user_progress = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å!",
        reply_markup=menu_keyboard
    )

# –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤
@dp.message(lambda msg: msg.text == "üßë‚Äçüè´ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤")
async def start_word_training(message: Message):
    user_id = message.from_user.id
    if user_id not in user_progress:
        user_progress[user_id] = {"index": 0, "correct": 0, "incorrect": 0}

    word = data["words"][user_progress[user_id]["index"]]
    question = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {word['word']}"
    user_progress[user_id]["word"] = word
    await message.answer(question)

@dp.message()
async def check_word_answer(message: Message):
    user_id = message.from_user.id
    if user_id not in user_progress or "word" not in user_progress[user_id]:
        return

    correct_word = user_progress[user_id]["word"]["translation"]
    user_answer = message.text.strip().lower()

    if user_answer == correct_word.lower():
        user_progress[user_id]["correct"] += 1
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        user_progress[user_id]["incorrect"] += 1
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_word}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    user_progress[user_id]["index"] += 1
    if user_progress[user_id]["index"] < len(data["words"]):
        word = data["words"][user_progress[user_id]["index"]]
        question = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {word['word']}"
        user_progress[user_id]["word"] = word
        await message.answer(question)
    else:
        await message.answer(f"–¢—ã –ø—Ä–æ—à–µ–ª –≤—Å–µ —Å–ª–æ–≤–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {user_progress[user_id]['correct']}, –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user_progress[user_id]['incorrect']}")
        user_progress[user_id]["index"] = 0  # –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è

# –û–±—â–∏–µ —Å–ª–æ–≤–∞
@dp.message(lambda msg: msg.text == "üìö –û–±—â–∏–µ —Å–ª–æ–≤–∞")
async def show_common_words(message: Message):
    word = random.choice(data["words"])
    response = f"**–°–ª–æ–≤–æ:** {word['word']}\n**–ü–µ—Ä–µ–≤–æ–¥:** {word['translation']}\n**–ü—Ä–∏–º–µ—Ä:** {word['example']}"
    await message.answer(response, parse_mode="Markdown")

# –¢–µ—Å—Ç—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
@dp.message(lambda msg: msg.text == "üîÑ –¢–µ—Å—Ç—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥")
async def start_translation_test(message: Message):
    word = random.choice(data["words"])
    choices = random.sample(data["words"], 3)
    correct_translation = word["translation"]
    options = [word["translation"]] + [choice["translation"] for choice in choices]
    random.shuffle(options)

    options_text = "\n".join([f"{idx+1}. {opt}" for idx, opt in enumerate(options)])
    question = f"–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞: {word['word']}?\n{options_text}"

    user_progress[message.from_user.id] = {"test_word": word, "correct_answer": correct_translation}
    await message.answer(question)

@dp.message()
async def check_translation_answer(message: Message):
    user_id = message.from_user.id
    if user_id not in user_progress or "test_word" not in user_progress[user_id]:
        return

    correct_answer = user_progress[user_id]["correct_answer"]
    try:
        answer = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç 1 –¥–æ 4.")
        return

    if answer < 1 or answer > 4:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç 1 –¥–æ 4.")
        return

    options = [user_progress[user_id]["test_word"]["translation"]] + \
             [choice["translation"] for choice in random.sample(data["words"], 3)]
    options_text = [opt.lower() for opt in options]
    
    if options_text[answer - 1] == correct_answer.lower():
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {correct_answer}")

# –§—Ä–∞–∑—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è
@dp.message(lambda msg: msg.text == "üó£ –§—Ä–∞–∑—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è")
async def show_communication_phrases(message: Message):
    phrase = random.choice(data["phrases"])
    response = f"**–§—Ä–∞–∑–∞:** {phrase['phrase']}\n**–ü–µ—Ä–µ–≤–æ–¥:** {phrase['translation']}"
    await message.answer(response, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
