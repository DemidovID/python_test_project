import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7943324084:AAHEXI3nIKDVcOvXiVROuCA50g5sPT7cVHk'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

CHOOSING_SERVICE, ENTERING_ADDRESS, CHOOSING_TIME, CONFIRMATION = range(4)

MAIN_MENU_KEYBOARD = [['üßπ –£—Å–ª—É–≥–∏', 'üõí –ó–∞–∫–∞–∑–∞—Ç—å'], ['üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'üìñ –ò—Å—Ç–æ—Ä–∏—è']]
MAIN_MENU_MARKUP = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)

async def start(update: Update, context):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CleanBot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU_MARKUP
    )

async def handle_menu(update: Update, context):
    text = update.message.text
    if text == 'üßπ –£—Å–ª—É–≥–∏':
        await show_services(update, context)
    elif text == 'üõí –ó–∞–∫–∞–∑–∞—Ç—å':
        return await order_start(update, context)
    elif text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await update.message.reply_text("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: +7 999 123-45-67")
    elif text == 'üìñ –ò—Å—Ç–æ—Ä–∏—è':
        await update.message.reply_text("üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")

async def show_services(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", callback_data='info_standard')],
        [InlineKeyboardButton("üîç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", callback_data='info_general')],
        [InlineKeyboardButton("üè† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='info_after_repair')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if isinstance(update, Update) and update.message:  # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    else:  # –ï—Å–ª–∏ —ç—Ç–æ callback-–∑–∞–ø—Ä–æ—Å
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)

async def service_info(update: Update, context):
    query = update.callback_query
    await query.answer()

    services = {
        'info_standard': "üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞: 2000 —Ä—É–±.\n- –ü—ã–ª—å\n- –ü–æ–ª—ã\n- –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
        'info_general': "üîç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞: 5000 —Ä—É–±.\n- –û–∫–Ω–∞\n- –ú–µ–±–µ–ª—å\n- –ì–ª—É–±–æ–∫–∞—è —á–∏—Å—Ç–∫–∞",
        'info_after_repair': "üè† –£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞: 7000 —Ä—É–±.\n- –ü—ã–ª—å\n- –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏\n- –û–∫–Ω–∞"
    }
    text = services.get(query.data, "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_services')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup)

async def go_back(update: Update, context):
    query = update.callback_query
    await query.answer()
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
    keyboard = [
        [InlineKeyboardButton("üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", callback_data='info_standard')],
        [InlineKeyboardButton("üîç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", callback_data='info_general')],
        [InlineKeyboardButton("üè† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='info_after_repair')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)

async def order_start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", callback_data='service_standard')],
        [InlineKeyboardButton("üîç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", callback_data='service_general')],
        [InlineKeyboardButton("üè† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='service_after_repair')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return CHOOSING_SERVICE

async def choose_service(update: Update, context):
    query = update.callback_query
    await query.answer()
    service_map = {
        'service_standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞',
        'service_general': '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞',
        'service_after_repair': '–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞'
    }
    context.user_data['service'] = service_map.get(query.data)
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {context.user_data['service']}\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    return ENTERING_ADDRESS

async def enter_address(update: Update, context):
    context.user_data['address'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.03.2025 14:00):")
    return CHOOSING_TIME

async def choose_time(update: Update, context):
    context.user_data['time'] = update.message.text
    summary = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"üßπ –£—Å–ª—É–≥–∞: {context.user_data['service']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {context.user_data['address']}\n"
        f"üïí –í—Ä–µ–º—è: {context.user_data['time']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_yes')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='confirm_no')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(summary, reply_markup=reply_markup)
    return CONFIRMATION

async def confirm_order(update: Update, context):
    query = update.callback_query
    await query.answer()
    if query.data == 'confirm_yes':
        await query.edit_message_text("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.")
    else:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

async def cancel(update: Update, context):
    await update.message.reply_text("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=MAIN_MENU_MARKUP)
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('üõí –ó–∞–∫–∞–∑–∞—Ç—å'), order_start)],
        states={
            CHOOSING_SERVICE: [CallbackQueryHandler(choose_service, pattern='^service_')],
            ENTERING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_address)],
            CHOOSING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            CONFIRMATION: [CallbackQueryHandler(confirm_order, pattern='^confirm_')]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(service_info, pattern='^info_'))
    app.add_handler(CallbackQueryHandler(go_back, pattern='^back_services'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    app.run_polling()

if __name__ == '__main__':
    main()