import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
TOKEN = '7809105311:AAFfNc7nuO9lQuB8CFWuhXmtX59ZooblUM4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞
CHOOSING_SERVICE, ENTERING_ADDRESS, CHOOSING_TIME, CONFIRMATION = range(4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä")
    welcome_text = (
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CleanBot! üåü\n"
        "–ú—ã ‚Äî –≤—ã–¥—É–º–∞–Ω–Ω–∞—è –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à –¥–æ–º –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–º! ‚ú®\n\n"
        "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"
    )
    keyboard = [
        ['üßπ –£—Å–ª—É–≥–∏', 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É'],
        ['üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é
async def handle_message(update: Update, context):
    text = update.message.text
    if text == 'üßπ –£—Å–ª—É–≥–∏':
        await update.message.reply_text('–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞ ‚Äî 2000 —Ä—É–±.\n- –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ ‚Äî 5000 —Ä—É–±.\n- –£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ ‚Äî 7000 —Ä—É–±.')
    elif text == 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É':
        return await order_start(update, context)
    elif text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await update.message.reply_text('–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 999 123-45-67')
    else:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.')

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ —É–±–æ—Ä–∫–∏
async def order_start(update: Update, context):
    keyboard = [['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è', '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è'], ['–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:", reply_markup=reply_markup)
    return CHOOSING_SERVICE

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏
async def choose_service(update: Update, context):
    context.user_data['service'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –Ω—É–∂–Ω–∞ —É–±–æ—Ä–∫–∞:")
    return ENTERING_ADDRESS

# –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
async def enter_address(update: Update, context):
    context.user_data['address'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.10.2023 14:00):")
    return CHOOSING_TIME

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
async def choose_time(update: Update, context):
    context.user_data['time'] = update.message.text
    order_summary = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"–¢–∏–ø —É–±–æ—Ä–∫–∏: {context.user_data['service']}\n"
        f"–ê–¥—Ä–µ—Å: {context.user_data['address']}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {context.user_data['time']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? (–î–∞/–ù–µ—Ç)"
    )
    keyboard = [['–î–∞', '–ù–µ—Ç']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text(order_summary, reply_markup=reply_markup)
    return CONFIRMATION

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context):
    if update.message.text == "–î–∞":
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
async def cancel(update: Update, context):
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–µ—Ä)
async def ask_feedback(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("1", callback_data='1'),
         InlineKeyboardButton("2", callback_data='2'),
         InlineKeyboardButton("3", callback_data='3'),
         InlineKeyboardButton("4", callback_data='4'),
         InlineKeyboardButton("5", callback_data='5')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —É–±–æ—Ä–∫–∞? –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
async def handle_feedback(update: Update, context):
    query = update.callback_query
    rating = query.data
    await query.answer()
    await query.edit_message_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {rating}!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    application = Application.builder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –∑–∞–∫–∞–∑–∞ —É–±–æ—Ä–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('üõí –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É'), order_start)],
        states={
            CHOOSING_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_service)],
            ENTERING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_address)],
            CHOOSING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_feedback))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()