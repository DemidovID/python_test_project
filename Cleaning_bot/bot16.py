import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7943324084:AAHEXI3nIKDVcOvXiVROuCA50g5sPT7cVHk'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_SERVICE, ENTERING_ADDRESS, CHOOSING_TIME, CONFIRMATION = range(4)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU_KEYBOARD = [['üßπ –£—Å–ª—É–≥–∏', 'üõí –ó–∞–∫–∞–∑–∞—Ç—å'], ['üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'üìñ –ò—Å—Ç–æ—Ä–∏—è']]
MAIN_MENU_MARKUP = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)

# –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_options = ['üßπ –£—Å–ª—É–≥–∏', 'üõí –ó–∞–∫–∞–∑–∞—Ç—å', 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'üìñ –ò—Å—Ç–æ—Ä–∏—è']

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞")
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CleanBot!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.\n\n"
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU_MARKUP
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def unknown_input(update: Update, context):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥: {update.message.text}")
    await update.message.reply_text(
        "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU_MARKUP
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_menu(update: Update, context):
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –º–µ–Ω—é: {text}")
    if text == 'üßπ –£—Å–ª—É–≥–∏':
        await show_services(update, context)
    elif text == 'üõí –ó–∞–∫–∞–∑–∞—Ç—å':
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞")
        return await order_start(update, context)
    elif text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await update.message.reply_text(
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CleanBot\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: +7 999 123-45-67\n"
            "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üòä"
        )
    elif text == 'üìñ –ò—Å—Ç–æ—Ä–∏—è':
        if 'orders' in context.user_data and context.user_data['orders']:
            orders_text = '\n'.join([f'üßπ {order["service"]}, üìç {order["address"]}, üïí {order["time"]}' for order in context.user_data['orders']])
            message = f"üìñ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n{orders_text}"
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞.")
    return ConversationHandler.END

# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
async def show_services(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞", callback_data='info_standard')],
        [InlineKeyboardButton("üîç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", callback_data='info_general')],
        [InlineKeyboardButton("üè† –£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='info_after_repair')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "üßº –ù–∞—à–∏ —É–±–æ—Ä–∫–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:"
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ
async def service_info(update: Update, context):
    query = update.callback_query
    await query.answer()
    services = {
        'info_standard': (
            "üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞\n"
            "üí∞ –¶–µ–Ω–∞: 3000 —Ä—É–±.\n"
            "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
            "- –£–±–æ—Ä–∫–∞ –ø—ã–ª–∏\n"
            "- –ú—ã—Ç—å—ë –ø–æ–ª–æ–≤\n"
            "- –ß–∏—Å—Ç–∫–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏"
        ),
        'info_general': (
            "üîç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞\n"
            "üí∞ –¶–µ–Ω–∞: 7000 —Ä—É–±.\n"
            "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
            "- –ú—ã—Ç—å—ë –æ–∫–æ–Ω\n"
            "- –ß–∏—Å—Ç–∫–∞ –º–µ–±–µ–ª–∏\n"
            "- –ì–ª—É–±–æ–∫–∞—è —É–±–æ—Ä–∫–∞"
        ),
        'info_after_repair': (
            "üè† –£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞\n"
            "üí∞ –¶–µ–Ω–∞: 9000 —Ä—É–±.\n"
            "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
            "- –£–±–æ—Ä–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø—ã–ª–∏\n"
            "- –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤\n"
            "- –ú—ã—Ç—å—ë –æ–∫–æ–Ω"
        )
    }
    text = services.get(query.data, "‚ùå –£–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_services')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

# –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
async def go_back(update: Update, context):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞", callback_data='info_standard')],
        [InlineKeyboardButton("üîç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", callback_data='info_general')],
        [InlineKeyboardButton("üè† –£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='info_after_repair')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üßº –ù–∞—à–∏ —É–±–æ—Ä–∫–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:",
        reply_markup=reply_markup
    )

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞
async def order_start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞", callback_data='service_standard')],
        [InlineKeyboardButton("üîç –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", callback_data='service_general')],
        [InlineKeyboardButton("üè† –£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='service_after_repair')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–±–æ—Ä–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=reply_markup
    )
    return CHOOSING_SERVICE

# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –≤ –∑–∞–∫–∞–∑–µ
async def choose_service(update: Update, context):
    query = update.callback_query
    await query.answer()
    service_map = {
        'service_standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞',
        'service_general': '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞',
        'service_after_repair': '–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞'
    }
    context.user_data['service'] = service_map.get(query.data)
    await query.edit_message_text(
        f"üßπ –í—ã –≤—ã–±—Ä–∞–ª–∏: {context.user_data['service']}\n"
        "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —É–±–æ—Ä–∫–∏:"
    )
    return ENTERING_ADDRESS

# –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
async def enter_address(update: Update, context):
    text = update.message.text
    if text in main_menu_options:
        temp_orders = context.user_data.get('orders', [])
        context.user_data.clear()
        context.user_data['orders'] = temp_orders
        await handle_menu(update, context)
        return ConversationHandler.END
    context.user_data['address'] = text
    await update.message.reply_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.03.2025 14:00"
    )
    return CHOOSING_TIME

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
async def choose_time(update: Update, context):
    text = update.message.text
    if text in main_menu_options:
        temp_orders = context.user_data.get('orders', [])
        context.user_data.clear()
        context.user_data['orders'] = temp_orders
        await handle_menu(update, context)
        return ConversationHandler.END
    context.user_data['time'] = text
    summary = (
        "üõí –í–∞—à –∑–∞–∫–∞–∑\n"
        f"üßπ –£–±–æ—Ä–∫–∞: {context.user_data['service']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {context.user_data['address']}\n"
        f"üïí –í—Ä–µ–º—è: {context.user_data['time']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_yes')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='confirm_no')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(summary, reply_markup=reply_markup)
    return CONFIRMATION

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context):
    query = update.callback_query
    await query.answer()
    if query.data == 'confirm_yes':
        if 'orders' not in context.user_data:
            context.user_data['orders'] = []
        context.user_data['orders'].append({
            'service': context.user_data['service'],
            'address': context.user_data['address'],
            'time': context.user_data['time']
        })
        await query.edit_message_text(
            "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä CleanBot! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. üòä"
        )
        temp_orders = context.user_data['orders']
        context.user_data.clear()
        context.user_data['orders'] = temp_orders
    else:
        await query.edit_message_text(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ 'üõí –ó–∞–∫–∞–∑–∞—Ç—å'!"
        )
        temp_orders = context.user_data.get('orders', [])
        context.user_data.clear()
        context.user_data['orders'] = temp_orders
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∫–æ–º–∞–Ω–¥–æ–π /cancel
async def cancel(update: Update, context):
    await update.message.reply_text(
        "üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω\n"
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=MAIN_MENU_MARKUP
    )
    temp_orders = context.user_data.get('orders', [])
    context.user_data.clear()
    context.user_data['orders'] = temp_orders
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def unknown_input(update: Update, context):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥: {update.message.text}")
    await update.message.reply_text(
        "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU_MARKUP
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üõí –ó–∞–∫–∞–∑–∞—Ç—å$'), order_start)],
        states={
            CHOOSING_SERVICE: [CallbackQueryHandler(choose_service, pattern='^service_')],
            ENTERING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_address)],
            CHOOSING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            CONFIRMATION: [CallbackQueryHandler(confirm_order, pattern='^confirm_')]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex('^üßπ –£—Å–ª—É–≥–∏$'), show_services))
    app.add_handler(MessageHandler(filters.Regex('^üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞$'), lambda update, context: update.message.reply_text(
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CleanBot\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: +7 999 123-45-67\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üòä"
    )))
    app.add_handler(MessageHandler(filters.Regex('^üìñ –ò—Å—Ç–æ—Ä–∏—è$'), handle_menu))
    app.add_handler(CallbackQueryHandler(service_info, pattern='^info_'))
    app.add_handler(CallbackQueryHandler(go_back, pattern='^back_services'))
    app.add_handler(conv_handler)
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    app.add_handler(MessageHandler(filters.Regex('^(' + '|'.join(main_menu_options) + ')$'), handle_menu))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_input))

    app.run_polling()

if __name__ == '__main__':
    main()