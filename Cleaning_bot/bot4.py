import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7809105311:AAFfNc7nuO9lQuB8CFWuhXmtX59ZooblUM4'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞
CHOOSING_SERVICE, ENTERING_ADDRESS, CHOOSING_TIME, CONFIRMATION = range(4)

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
MAIN_MENU_KEYBOARD = [['üßπ –£—Å–ª—É–≥–∏', 'üõí –ó–∞–∫–∞–∑–∞—Ç—å'], ['üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'üìñ –ò—Å—Ç–æ—Ä–∏—è']]
MAIN_MENU_MARKUP = ReplyKeyboardMarkup(MAIN_MENU_KEYBOARD, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —á–∞—Ç")
    welcome_text = (
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CleanBot! üåü\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É, —É–∑–Ω–∞—Ç—å –æ–± —É—Å–ª—É–≥–∞—Ö –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(welcome_text, reply_markup=MAIN_MENU_MARKUP)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
async def handle_menu(update: Update, context):
    text = update.message.text
    if text == 'üßπ –£—Å–ª—É–≥–∏':
        await show_services(update, context)
    elif text == 'üõí –ó–∞–∫–∞–∑–∞—Ç—å':
        return await order_start(update, context)
    elif text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await update.message.reply_text("üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: +7 999 123-45-67")
    elif text == 'üìñ –ò—Å—Ç–æ—Ä–∏—è':
        await show_history(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.")

# –ü–æ–∫–∞–∑ —É—Å–ª—É–≥
async def show_services(update: Update, context):
    services_text = (
        "–ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
        "1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞ ‚Äî 2000 —Ä—É–±.\n"
        "2. –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ ‚Äî 5000 —Ä—É–±.\n"
        "3. –£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ ‚Äî 7000 —Ä—É–±."
    )
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π", callback_data='info_standard')],
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π", callback_data='info_general')],
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='info_after_repair')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(services_text, reply_markup=reply_markup)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ
async def service_info(update: Update, context):
    query = update.callback_query
    await query.answer()
    service_map = {
        'info_standard': "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞: —É–±–æ—Ä–∫–∞ –ø—ã–ª–∏, –ø–æ–ª–æ–≤, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏.",
        'info_general': "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞: –≥–ª—É–±–æ–∫–∞—è —á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –¥–æ–º–∞.",
        'info_after_repair': "–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞: —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø—ã–ª–∏."
    }
    await query.edit_message_text(service_map[query.data])

# –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
async def order_start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", callback_data='service_standard')],
        [InlineKeyboardButton("–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", callback_data='service_general')],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='service_after_repair')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:", reply_markup=reply_markup)
    return CHOOSING_SERVICE

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏
async def choose_service(update: Update, context):
    query = update.callback_query
    await query.answer()
    service_map = {
        'service_standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è',
        'service_general': '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è',
        'service_after_repair': '–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞'
    }
    context.user_data['service'] = service_map[query.data]
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è —É–±–æ—Ä–∫–∏:")
    return ENTERING_ADDRESS

# –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
async def enter_address(update: Update, context):
    context.user_data['address'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.10.2023 14:00):")
    return CHOOSING_TIME

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
async def choose_time(update: Update, context):
    context.user_data['time'] = update.message.text
    order_summary = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"–¢–∏–ø: {context.user_data['service']}\n"
        f"–ê–¥—Ä–µ—Å: {context.user_data['address']}\n"
        f"–í—Ä–µ–º—è: {context.user_data['time']}\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?"
    )
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data='confirm_yes'),
         InlineKeyboardButton("–ù–µ—Ç", callback_data='confirm_no')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(order_summary, reply_markup=reply_markup)
    return CONFIRMATION

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context):
    query = update.callback_query
    await query.answer()
    if query.data == 'confirm_yes':
        await query.edit_message_text("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    else:
        await query.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
async def show_history(update: Update, context):
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n1. –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è, 15.10.2023")

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context):
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('üõí –ó–∞–∫–∞–∑–∞—Ç—å'), order_start)],
        states={
            CHOOSING_SERVICE: [CallbackQueryHandler(choose_service)],
            ENTERING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_address)],
            CHOOSING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            CONFIRMATION: [CallbackQueryHandler(confirm_order)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    application.add_handler(CallbackQueryHandler(service_info, pattern='info_'))
    application.run_polling()

if __name__ == '__main__':
    main()